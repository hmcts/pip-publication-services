plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.4.2'
  id 'org.owasp.dependencycheck' version '10.0.3'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.0.1.5171'
  id 'io.freefair.lombok' version '8.12.1'
}

apply plugin: 'org.owasp.dependencycheck'
group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom functionalTestImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly

  all {
    exclude group: 'commons-logging', 'module': 'commons-logging'
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.21.2'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "7.10.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.functionalTest, sourceSets.smokeTest]
  reportsDir = file("${layout.buildDirectory.get()}/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = ["src/main/java/uk/gov/hmcts/reform/pip/publication/services/config/WebClientConfiguration.java"]

sonarqube {
  properties {
    property "sonar.projectName", "PIP Publication Services"
    property "sonar.projectKey", "pip-publication-services"
    property "sonar.exclusions", sonarExclusions.join(', ')
  }
}


// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = '2.24.3'
  reformLogging = '6.1.8'
}


dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux'
  implementation group: 'com.azure.spring', name: 'spring-cloud-azure-starter-active-directory', version: '5.19.0'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.4'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: reformLogging

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.0'

  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '5.2.1-RELEASE'

  implementation group: 'com.github.hmcts', name: 'pip-data-models', version: '2.2.16', {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-jpa'
  }

  implementation group: 'com.opencsv', name: 'opencsv', version: '5.10'
  implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.4.0'
  implementation group: 'org.redisson', name: 'redisson', version: '3.44.0'
  implementation group: 'com.giffing.bucket4j.spring.boot.starter', name: 'bucket4j-spring-boot-starter', version: '0.12.8'

  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  testImplementation group: 'org.springframework.security', name: 'spring-security-test'

  testImplementation(platform('org.junit:junit-bom:5.11.4'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '4.12.0'
  testImplementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.12.0'
  testImplementation group: 'com.squareup.okhttp3', name: 'okhttp-tls', version: '4.12.0'
  testImplementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '3.0.4'
  testImplementation group: 'com.redis', name: 'testcontainers-redis', version: '2.2.3'
  testImplementation group: 'org.testcontainers', name: 'junit-jupiter'
  testImplementation group: 'io.github.hakky54', name: 'logcaptor', version: '2.10.1'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.7', classifier: 'all'
  functionalTestImplementation group: 'io.rest-assured', name: 'rest-assured'
}

task fortifyScan(type: JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

application {
  mainClass = 'uk.gov.hmcts.reform.pip.publication.services.Application'
}

bootJar {
  getArchiveFileName().set(provider {
    'pip-publication-services.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

ext['log4j2.version'] = '2.24.3'
