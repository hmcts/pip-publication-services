#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "pip"
def component = "publication-services"

GradleBuilder builder = new GradleBuilder(this, product)

def setupTestSecrets() {
  def bootstap_env = env.ENV == "prod" || env.ENV == "demo" || env.ENV == "sbox" ? env.ENV : "stg"
  azureKeyVault(
    keyVaultURL: "https://pip-bootstrap-${bootstap_env}-kv.vault.azure.net/",
    secrets: [
      secret('gov-uk-notify-test-api-key', 'NOTIFY_API_KEY'),
      secret('pip-team-email', 'PI_TEAM_EMAIL'),
      secret('app-pip-publication-services-scope', 'APP_URI'),
      secret('app-tenant', 'TENANT_ID'),
      secret('app-pip-data-management-id', 'CLIENT_ID_FT'),
      secret('app-pip-data-management-pwd', 'CLIENT_SECRET_FT')
    ]) {
    env.NOTIFY_API_KEY = "${NOTIFY_API_KEY}"
    env.APP_URI = "${APP_URI}"
    env.TENANT_ID = "${TENANT_ID}"
    env.PI_TEAM_EMAIL = "${PI_TEAM_EMAIL}"
    env.CLIENT_ID_FT = "${CLIENT_ID_FT}"
    env.CLIENT_SECRET_FT = "${CLIENT_SECRET_FT}"
  }
}

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

withPipeline(type, product, component) {

  onMaster() {
    env.ENV = 'stg'
  }
  onPR() {
    env.ENV = 'dev'
  }
  onDemo {
    env.ENV = 'demo'
  }
  onPerftest {
    env.ENV = 'perftest'
  }
  onIthc {
    env.ENV = 'ithc'
  }
  setupTestSecrets()
  enableSlackNotifications('#pip-build-notices')
  enableAksStagingDeployment()
  disableLegacyDeployment()
  enableApiGatewayTest()

  afterAlways('test') {
    builder.gradle('integration')
  }
}
